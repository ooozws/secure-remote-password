'use strict'

const sha256 = require('./sha256')
const SRPInteger = require('./srp-integer')

// const Group = {
//   N2048: {
//     largeSafePrime: `
//       AC6BDB41 324A9A9B F166DE5E 1389582F AF72B665 1987EE07 FC319294
//       3DB56050 A37329CB B4A099ED 8193E075 7767A13D D52312AB 4B03310D
//       CD7F48A9 DA04FD50 E8083969 EDB767B0 CF609517 9A163AB3 661A05FB
//       D5FAAAE8 2918A996 2F0B93B8 55F97993 EC975EEA A80D740A DBF4FF74
//       7359D041 D5C33EA7 1D281E44 6B14773B CA97B43A 23FB8016 76BD207A
//       436C6481 F1D2B907 8717461A 5B9D32E6 88F87748 544523B5 24B0D57D
//       5EA77A27 75D2ECFA 032CFBDB F52FB378 61602790 04E57AE6 AF874E73
//       03CE5329 9CCC041C 7BC308D8 2A5698F3 A8D0C382 71AE35F8 E9DBFBB6
//       94B5C803 D89F7AE4 35DE236D 525F5475 9B65E372 FCD68EF2 0FA7111F
//       9E4AFF73
//     `,
//     generatorModulo: '02',
//     hashFunction: 'sha256',
//     hashOutputBytes: (256 / 8)
//   },
//   N3072: {
//     largeSafePrime: `
//       FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08
//       8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B
//       302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9
//       A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6
//       49286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8
//       FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D
//       670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C
//       180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF695581718
//       3995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D
//       04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7D
//       B3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D226
//       1AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200C
//       BBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFC
//       E0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF
//     `,
//     generatorModulo: '05',
//     hashFunction: 'sha256',
//     hashOutputBytes: (384 / 8)
//   },
// }

const input = {
  largeSafePrime: `
      FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08
      8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B
      302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9
      A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6
      49286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8
      FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D
      670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C
      180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF695581718
      3995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D
      04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7D
      B3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D226
      1AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200C
      BBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFC
      E0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF
  `,
  generatorModulo: '05',
  hashFunction: 'sha256',
  hashOutputBytes: (384 / 8)
}

// N    A large safe prime (N = 2q+1, where q is prime)
// g    A generator modulo N
// k    Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6)
// H()  One-way hash function
exports.N = SRPInteger.fromHex(input.largeSafePrime.replace(/\s+/g, ''))
exports.g = SRPInteger.fromHex(input.generatorModulo.replace(/\s+/g, ''))
exports.k = sha256(exports.N, exports.g)
exports.H = sha256

exports.hashOutputBytes = input.hashOutputBytes
